{"version":3,"sources":["Components/Header/index.js","Components/Field/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","className","Button","href","variant","React","Component","Col","md","Form","Group","controlId","this","props","Label","caption","Control","type","placeholder","App","Container","Row","String","raw","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2WAIqBA,G,6KAEnB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACnB,kDACA,iEAGA,2BACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,kEAAkEC,QAAQ,WAAvF,kB,GAT4BC,IAAMC,YCDrBP,E,uKAEnB,OACE,kBAACQ,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAWC,KAAKC,MAAMF,WAChC,kBAACF,EAAA,EAAKK,MAAN,KAAaF,KAAKC,MAAME,SACxB,kBAACN,EAAA,EAAKO,QAAN,CAAcC,KAAK,OAAOC,YAAaN,KAAKC,MAAME,gB,GANtBV,IAAMC,W,i/CC0F3Ba,MA5Cf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MAEA,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACd,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAACY,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOV,UAAU,QAAQI,QAAQ,QACjC,kBAAC,EAAD,CAAOJ,UAAU,SAASI,QAAQ,oBAEpC,kBAACM,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOV,UAAU,QAAQI,QAAQ,aACjC,kBAAC,EAAD,CAAOJ,UAAU,SAASI,QAAQ,UAEpC,kBAACM,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOV,UAAU,QAAQI,QAAQ,QACjC,kBAAC,EAAD,CAAOJ,UAAU,SAASI,QAAQ,UAEpC,kBAACM,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOV,UAAU,aAAaI,QAAQ,kBACtC,kBAAC,EAAD,CAAOJ,UAAU,SAASI,QAAQ,qBAK1C,kBAACM,EAAA,EAAD,KACE,kBAACd,EAAA,EAAD,KACE,2CACA,6BAvEHe,OAAOC,IAAd,OAyEQ,kBAAChB,EAAA,EAAD,KACE,2CACA,6BA5DHe,OAAOC,IAAd,WCZkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4994a63d.chunk.js","sourcesContent":["import React from 'react';\nimport { Jumbotron, Button } from 'react-bootstrap';\nimport './style.css';\n\nexport default class Header extends React.Component {\n  render(){\n  return (\n    <Jumbotron className=\"jumbotron\">\n      <h1>jQuery Simple Mask</h1>\n      <p>\n        Simple and fast number input masks\n      </p>\n      <p>\n        <Button href=\"https://github.com/DevUtils/jQuerySimpleMask/archive/master.zip\" variant=\"primary\">Download</Button>\n      </p>\n    </Jumbotron>)\n  }\n}","import React from 'react';\nimport { Form, Col } from 'react-bootstrap';\n\nexport default class Header extends React.Component {\n  render(){\n  return (\n    <Col md=\"6\">\n      <Form.Group controlId={this.props.controlId}>\n        <Form.Label>{this.props.caption}</Form.Label>\n        <Form.Control type=\"text\" placeholder={this.props.caption} />\n      </Form.Group>\n    </Col>)\n  }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/bootstrap.dark.min.css';\nimport { Container, Row, Col, Form } from 'react-bootstrap';\nimport Header from \"./Components/Header\";\nimport Field from \"./Components/Field\";\nimport './App.css';\n\nfunction getHelperModePreCode() {\n  return String.raw`$(document).ready\n(\n  function()\n  {\n    $('#frCep' ).simpleMask( { 'mask': 'cep'     , 'nextInput': true } );\n    $('#frDtel').simpleMask( { 'mask': 'ddd-tel9', 'nextInput': true } );\n    $('#frTel' ).simpleMask( { 'mask': 'tel9'    , 'nextInput': true } );\n    $('#frData').simpleMask( { 'mask': 'data'    , 'nextInput': true } );\n    $('#frCpf' ).simpleMask( { 'mask': 'cpf'     , 'nextInput': true } );\n    $('#frCnpj').simpleMask( { 'mask': 'cnpj'    , 'nextInput': true } );\n  }\n);`\n}\n\nfunction getCustomPreCode() {\n  return String.raw`$(document).ready\n(\n  function()\n  {\n    $('#frCep' ).simpleMask( { 'mask': '#####-###'                          , 'nextInput': $('#frDtel') } );\n    $('#frDtel').simpleMask( { 'mask': ['(##) ####-####', '(##) #####-####'], 'nextInput': $('#frTel' ) } );\n    $('#frTel' ).simpleMask( { 'mask': ['####-####', '#####-####']          , 'nextInput': $('#frData') } );\n    $('#frData').simpleMask( { 'mask': '##/##/####'                         , 'nextInput': $('#frCpf' ) } );\n    $('#frCpf' ).simpleMask( { 'mask': '###.###.###-##'                     , 'nextInput': $('#frCnpj') } );\n    $('#frCnpj').simpleMask( { 'mask': '##.###.###/####-##' } );\n\n  $('#frCallback').simpleMask\n  (\n    {\n      'mask'       : '#####',\n      'nextInput'  : true,\n      'onComplete' : function(element)\n      {\n        console.log('onComplete', element);\n      }\n    }\n  );\n);`\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <Container>\n        <Row>\n          <Col>\n            <Form>\n              <Row>\n                <Field controlId=\"frCep\" caption=\"CEP\"/>\n                <Field controlId=\"frDtel\" caption=\"(DDD) Telefone\"/>\n              </Row>\n              <Row>\n                <Field controlId=\"frTel\" caption=\"Telefone\"/>\n                <Field controlId=\"frData\" caption=\"Data\"/>\n              </Row>\n              <Row>\n                <Field controlId=\"frCpf\" caption=\"CPF\"/>\n                <Field controlId=\"frCnpj\" caption=\"CNPJ\"/>\n              </Row>\n              <Row>\n                <Field controlId=\"frCallback\" caption=\"With Callback\"/>\n                <Field controlId=\"frNone\" caption=\"Without Mask\"/>\n              </Row>\n            </Form>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h3>Helper Mode</h3>\n            <pre>{getHelperModePreCode()}</pre>\n          </Col>\n          <Col>\n            <h3>Custom Mode</h3>\n            <pre>{getCustomPreCode()}</pre>\n          </Col>\n        </Row>\n     </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}